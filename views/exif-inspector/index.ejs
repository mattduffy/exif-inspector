    <section id="headerSection">
        <h1><%= siteName %></h1>
        <h2>View and edit your image metadata.</h2>
        <p>Built using the excellent <a href="https://exiftool.org" target="_blank">Exiftool</a> by Phil Harvey,
        this app lets you inspect the metadata tags embedded in your image files, edit existing tags, 
        or remove the metadata entirely.</p>
        <% if (flash?.info) { %>
        <div id="info" class="info">
            <span><%= flash.info %></span>
        </div>
        <% } %>
        <% if (flash?.message) { %>
        <div id="messages" class="messages">
            <span><%= flash.message %></span>
        </div>
        <% } %>
        <% if (flash?.error) { %>
        <div id="errors" class="errors">
            <span><%= flash.error %></span>
        </div>
        <% } %>
        <% if (isAuthenticated) { %>

        <% } %>
    </section>
    <section id="formSection">
        <form id="uploaderId" name="uploader" action="<%= origin %>upload" method="POST" enctype="multiplart/form-data">
            <fieldset id="hiddenFields_Id" name="hiddenFields" form="uploaderId" class="hiddenFieldset" title="">
                <input id="inspectedFilename_Id" name="inspectedFilename" type="hidden" value="">
                <input id="csrf-token_Id" name="csrf-token" type="hidden" value="<%= csrfToken  %>">
            </fieldset>
            <fieldset id="tagSelect_Id" name="tagSelect" form="uploaderId" class="tagSelect" title="Metadata to display">
                <legend>View Image Metadata Tags</legend>
                <label for="full_Id">Full metadata</label>
                <input id="full_Id" name="tagSet" type="radio" value="Full" tabeindex="0" checked> 
                <label for="common_Id">Common metadata</label>
                <input id="common_Id" name="tagSet" type="radio" value="Common" tabeindex="0">
                <label for="location_Id">Location metadata</label>
                <input id="location_Id" name="tagSet" type="radio" value="Location" tabeindex="0">
                <label for="car_Id">Content &amp; Rights</label>
                <input id="car_Id" name="tagSet" type="radio" value="CAR" tabeindex="0">
            </fieldset>
            <fieldset id="tagEditSelect_Id" name="tagEditSelect" form="uploaderId" class="tagSelect" title="Metadata to edit">
                <legend>Clear Image Metadata Tags</legend>
                <label for="stripAllTags_Id">Clear all tags</label>
                <input id="stripAllTags_Id" name="tagSet" type="radio" value="StripAllTags" tabindex="0">
                <label for="stripLocationTags_Id">Clear location tags</label>
                <input id="stripLocationTags_Id" name="tagSet" type="radio" value="StripLocation" tabindex="0">
            </fieldset>
            <fieldset id="filesId" name="files" form="uploaderId" class="" title="Upload image to inspect" tabeindex="0">
                <legend>Upload an image to inspect its metadata.</legend>
                <div id="dragzone">
                    <h2>Drop a photo here to inspect its metadata.</h2>
                    <br>
                    <input id="image_0Id" name="image_0" type="file" accept=".png,.jpg,.jpeg,.heic,.webp">
                </div>
            </fieldset>
            <span class="or">or</span>
            <fieldset id="urlInspectId" name="urlInspect" form="uploaderId" class="urlFieldset" title="Paset URL to image to inspect">
                <label for="url_Id">URL of an image to inspect: </label>
                <input id="url_Id" name="url" type="text" value="" tabeindex="0">
                <input id="submit_Id" name="submit" type="submit" value="Inspect Image" tabindex="0">
            </fieldset>
        </form>
    </section>
    <section id="metadataSection">
        <div id="infozone" class="hidden">
            <h3 class='mono'>File Information</h3>
        </div>
        <div id="mapzone" class="hidden">
            <h3 class='mono'>Location Information</h3>
        </div>
        <div id="contentzone" class="hidden">
            <h3 class='mono'>Content, Attributions, and Rights</h3>
        <div id="metazone" class="hidden">
            <h3 class='mono'>Camera, Exposure, and Software Information</h3>
        </div>
    </section>
    <script
          src="https://cdn.apple-mapkit.com/mk/5.x.x/mapkit.core.js"
          crossorigin async
          data-callback="initMapKit"
          data-libraries="full-map,services"
          data-initial-token=""
        ></script>
    <script nonce="<%= nonce %>" type="module">
        const origin = '<%= origin %>'
        const access = '<%= accessToken %>'
        const form = document.forms[0]
        const fileElement = form['image_0Id']
        const submitButton = form['submit_Id']
        const dragzone = document.querySelector('div#dragzone')
        const infozone = document.querySelector('div#infozone')
        // const metazone = document.querySelector('div#metazone')
        // const mapzone = document.querySelector('div#mapzone')
        const formData = new FormData()
        let map
        async function setupMapKitJs() {
            const tokenOpts = {
                method: 'GET',
                headers: {
                    Accept: 'application/json',
                    Authorization: `Bearer ${access}`,
                },
            }
            const request = new Request(`${origin}mapkit/getToken`, tokenOpts)
            const response = await fetch(request)
            console.log(response.status)
            const { tokenID } = await response.json()
            if (!window.mapkit || window.mapkit.loadedLibraries.length === 0) {
                // mapkit.core.js or the libraries are not loaded yet.
                // Set up the callback and wait for it to be called.
                await new Promise(resolve => { window.initMapKit = resolve });
                // Clean up
                delete window.initMapKit;
            }
            mapkit.init({
                authorizationCallback: function(done) {
                    done(tokenID);
                }
            })
        }
        async function main(lat, lon) {
            if (lat === null || lon === null) {
                console.info('lat or lon (or both) are null, can\'t display map.')
            } else {
                await setupMapKitJs()
                const CAMERA_ALT = 5000
                const opts = {
                    mapType: mapkit.Map.MapTypes.Hybrid,
                    loadPriority: mapkit.Map.LoadPriorities.PointsOfInterest,
                    visibleMapRect: new mapkit.MapRect(0, 0, 1, 1),
                    showsCompass: mapkit.FeatureVisibility.Visible,
                    showsScale: mapkit.FeatureVisibility.Visible,
                    showsZoomControl: true,
                    showsPointsOfInterest: true,
                    showsMapTypeControl: true,
                    isZoomEnabled: true,
                    isRotationEnabled: true,
                    isScrollEnabled: true,
                }
                window.map = new mapkit.Map(mapzone, opts)
                window.map.cameraDistance = CAMERA_ALT 
                const marker = new window.mapkit.Coordinate(lat, lon)
                const annotation = new window.mapkit.MarkerAnnotation(marker)
                window.map.showItems([annotation])
            }
        }
        if (navigator.maxTouchPoints === 0) {
            dragzone.addEventListener('click', (e) => {
                console.log('dragzone click event target: ', e)
                // e.stopPropagation()
                // e.preventDefault()
                if (e.target.tagName === 'DIV') {
                    fileElement.click() 
                }
            })
        } else {
            console.log('so many touch points')
            fileElement.style.display = 'visible' 
        }
        
        dragzone.addEventListener('dragenter', (e) => {
            // e.preventDefault()
            e.stopPropagation();
            // e.target.classList.add('dragTarget')
            (document.querySelector('#filesId')).classList.add('dragTarget')
            console.log('entering the drag zone')
        })
        dragzone.addEventListener('dragleave', (e) => {
            // e.preventDefault()
            e.stopPropagation();
            // e.target.classList.remove('dragTarget')
            (document.querySelector('#filesId')).classList.remove('dragTarget')
            console.log('leaving drag zone.')
        })
        dragzone.addEventListener('dragover', (e) => {
            e.preventDefault()
            // console.log(e)
        })
        dragzone.addEventListener('drop', (e) => {
            e.preventDefault()
            e.stopPropagation();
            (document.querySelector('#filesId')).classList.remove('dragTarget')
            // e.target.classList.remove('dragTarget')
            const fileInput = form['image_0Id']
            fileInput.files = e.dataTransfer.files
            // const files = e.dataTransfer.files
            console.log(fileInput.files[0])
            setFileInfo(fileInput.files[0])
        })
        fileElement.addEventListener('change', (e) => {
            e.preventDefault()
            e.stopPropagation()
            console.log('fileElement change: ', e)
            setFileInfo(e.target.files[0])
        })
        submitButton.addEventListener('click', (e) => {
            e.preventDefault()
            e.stopPropagation()
            if (form['url'].value === '') {
                form['url'].focus()
                return
            }
            setFileInfo()
        })
        async function setFileInfo(file = null) {
            formData.append('csrfTokenHidden', form['csrf-token'].value)
            formData.append('tagSet', form['tagSet'].value)
            infozone.classList.remove('hidden')
            // metazone.classList.remove('hidden')
            if (file !== null) {
                // metazone.innerHTML = ''
                if (infozone.contains(document.querySelector('ul#fileInfo'))) {
                    infozone.removeChild(document.querySelector('ul#fileInfo'))
                }
                let info = document.createElement('dl')
                info.id = 'fileInfo'
                const name = document.createElement('dt')
                name.innerText = file.name
                const size = document.createElement('dt')
                size.innerText = `${Math.round(file.size / 1024)} KB`
                const type = document.createElement('dt')
                type.innerText = file.type
                info.appendChild(name)
                info.appendChild(type)
                info.appendChild(size)
                let img
                img = document.createElement('dd')
                if (/heic$/i.test(file.type)) {
                    // chrome doesn't natively display .HEIC image format
                    img.appendChild(document.createTextNode('HEIC image format is tough to display.'))
                } else {
                    const preview = document.createElement('img')
                    preview.classList.add('smallImgPreview')
                    img.appendChild(preview)
                    const fileReader = new FileReader()
                    fileReader.addEventListener('load', (e) => {
                        preview.src = e.target.result
                    })
                    fileReader.readAsDataURL(file)
                }
                info.appendChild(img)
                infozone.appendChild(info)
                if (form['image_0'].files.length > 0) {
                    formData.append('image_0', file)
                }
            } else {
                if (form['url'].value !== '') {
                    formData.append('url', form['url'].value)
                    let info = document.createElement('dl')
                    info.id = 'fileInfo'
                    const name = document.createElement('dt')
                    name.innerText = form['url'].value
                    info.appendChild(name)
                    const img = document.createElement('dd')
                    const remoteThumbnail = document.createElement('img')
                    remoteThumbnail.classList.add('smallImgPreview')
                    remoteThumbnail.src = form['url'].value
                    img.appendChild(remoteThumbnail)
                    info.appendChild(img)
                    infozone.appendChild(info)
                }
            }
            console.log(`tagSet: ${formData.get('tagSet')}`)
            console.log(`image_0: ${formData.get('image_0')}`)
            console.log(`url: ${formData.get('url')}`)
            await send(formData)
        }
        let imgMetadata
        let tags
        async function send(data) {
            let accessToken = '<%= accessToken %>'
            const opts = {
                method: 'POST',
                headers: {
                    'Accept': 'application/json',
                    Authorization: `Bearer ${access}`,
                },
                body: data
            }
            console.log(opts)
            const url = new URL(`${origin}upload`)
            console.log(url.toString())
            const request = new Request(url, opts)
            console.log(request)
            const response = await fetch(request, { credentials: 'same-origin' })
            if (response.status === 200) {
                const results = await response.json()
                console.log(results)
                if (results.inspectedFile) {
                    form['inspectedFilename'].value = results.inspectedFile
                }
                const list = document.createElement('dl')
                list.classList.add('mono')
                list.id = 'tagList'
                imgMetadata = results.metadata
                if (results?.modifiedFile && results.modifiedFile !== '') {
                    const linkSection = document.createElement('section')
                    linkSection.id = 'linkSection'
                    const div = document.createElement('div')
                    const a = document.createElement('a')
                    a.href = `${origin}inspected/${results.modifiedFile}`
                    a.innerText = 'Save your image with metadata edits.'
                    a.setAttribute('target', '_blank')
                    div.appendChild(a)
                    linkSection.appendChild(div)
                    const parent = document.querySelector('div#main-content')
                    parent.insertBefore(linkSection, document.querySelector('section#metadataSection'))
                }
                tags = Object.keys(results.metadata[0])
                // check if location info is present to display map
                let lat
                let NS
                let lon
                let EW
                if (tags.includes('EXIF:GPSLongitude') && tags.includes('EXIF:GPSLatitude')) {
                    lat = parseFloat(imgMetadata[0]['EXIF:GPSLatitude'])
                    NS = imgMetadata[0]['EXIF:GPSLatitudeRef']
                    if (/south/i.test(NS)) lat *= (-1)
                    lon = parseFloat(imgMetadata[0]['EXIF:GPSLongitude'])
                    EW = imgMetadata[0]['EXIF:GPSLongitudeRef']
                    if (/west/i.test(EW)) lon *= (-1)
                } else if (tags.includes('Composite:GPSPosition')) {
                    let [_lat, _lon] = imgMetadata[0]['Composite:GPSPosition'].split(', ');
                    [lat, NS] = _lat.split(' ')
                    lat = parseFloat(lat)
                    if (/s/i.test(NS)) lat *= (-1);
                    [lon, EW] = _lon.split(' ');
                    lon = parseFloat(lon)
                    if (/w/i.test(EW)) lon *= (-1)
                } else {
                    lat =  null
                    lon = null
                }
                if (lat !== null && lon !== null) {
                    console.log(`image location: lat ${lat} ${NS}, lon ${lon} ${EW}`)
                    await main(lat, lon)
                    const map = document.querySelector('div#mapzone')
                    map.classList.remove('hidden')
                    let dt = document.createElement('dt')
                    dt.appendChild(map)
                    const locationListDiv = tagListDiv('locationzone')
                    const dl = locationListDiv.children[0]
                    dl.appendChild(dt)
                }
                let x = 0
                let seen = new Set()
                let showLocationTags = false
                let showOtherTags = false
                let showCARTags = false
                for(const tag of tags) {
                    let [g,t] = tag.split(':')
                    seen.add(g)
                    x += 1
                    const dtTag = document.createElement('dt')
                    const ddTag = document.createElement('dd')
                    dtTag.id = `tag_${x}`
                    dtTag.innerHTML = `${tag}`
                    ddTag.id = `val_${x}`
                    if (/ThumbnailImage|PreviewImage|MPImage2/i.test(t)) {
                        const img = document.createElement('img')
                        img.classList.add('smallImgPreview')
                        const type = imgMetadata[0]['File:MIMEType']
                        const imgData = imgMetadata[0][tag].slice(7)
                        const imgSource = `data:${type};base64,${imgData}`
                        img.src = imgSource
                        ddTag.appendChild(img)
                    } else {
                        ddTag.innerHTML = `${imgMetadata[0][tag]}`
                    }
                    if (/file/i.test(tag)) {
                        // file tags
                        const fileInfo = document.querySelector('dl#fileInfo')
                        fileInfo.appendChild(dtTag)
                        fileInfo.appendChild(ddTag)
                    } else if (/gps/i.test(tag)) {
                        // location tags
                        const div = tagListDiv('locationzone')
                        const dl = div.querySelector(':scope > dl')
                        dl.appendChild(dtTag)
                        dl.appendChild(ddTag)
                        showLocationTags = true
                    } else if (isCARTag(t)) {
                        // content, attributions, and rights
                        const div = tagListDiv('contentzone')
                        const dl = div.querySelector(':scope > dl')
                        const label = document.createElement('label')
                        label.setAttribute('for', `val_${x}`)
                        label.innerText = tag
                        // dl.appendChild(dtTag)
                        dtTag.removeChild(dtTag.firstChild)
                        dtTag.appendChild(label)
                        dl.appendChild(dtTag)
                        const textarea = document.createElement('textarea')
                        textarea.name = tag
                        textarea.id = `val_${x}`
                        textarea.rows = 3
                        textarea.style.width = '95%'
                        textarea.value = `${imgMetadata[0][tag]}`
                        ddTag.replaceChild(textarea, ddTag.firstChild)
                        dl.appendChild(ddTag)
                        showCARTags = true
                    } else {
                        // all other metadata tags
                        const otherMetadata = tagListDiv('metazone')
                        const dl = otherMetadata.querySelector(':scope > dl')
                        dl.appendChild(dtTag)
                        dl.appendChild(ddTag)
                        showOtherTags = true
                    }
                }
                // metazone.appendChild(list)
                if (showOtherTags) {
                    metazone.classList.remove('hidden')
                    metadataSection.appendChild(metazone)
                }
                if (showCARTags) {
                    document.querySelector('div#contentzone').classList.remove('hidden') 
                } 
            } else {
                const responseErrDiv = document.createElement('div')
                div.id = 'responseError'
                const text = document.createTextNode(response.statusText)
                div.appendChild(text)
                fileInfo.insertBefore(div, fileInfo.children[0])
            }
        }
        function isCARTag(tag) {
            const cartags = ['ImageDescription', 'Artist', 'Copyright', 'By-line', 'By-lineTitle', 'Caption-Abstract', 'CopyrightNotice', 'Credit', 'Headline', 'Keywords', 'Source', 'AuthorsPosition', 'Rights', 'CopyrightFlag', 'Url', 'Location', 'WebStatement', 'Subject', 'Creator', 'Description', 'LicensorURL']
           return cartags.includes(tag)
        }
        function tagListDiv(tag) {
            if (tag === undefined || tag === null || tag === '') {
                return false
            }
            // console.log(`div#${tag}`)
            let div = document.querySelector(`div#${tag}`)
            if (!!!div) {
                div = document.createElement('div')
                div.id = tag
                div.appendChild(document.createElement('dl'))
                document.querySelector('section#metadataSection').appendChild(div)
           } else {
                let dl = div.querySelector(':scope > dl')
                if (!!!dl) {
                    // console.log(`creating dl for ${tag}`)
                    dl = document.createElement('dl')
                    div.appendChild(dl)
                }
           }
           // console.log(`returning div: ${div}`)
           return div
        }
    </script>
