    <section id="headerSection">
        <h1><%= siteName %></h1>
        <h2>View and edit your image metadata.</h2>
        <p>Built using the excellent <a href="https://exiftool.org" target="_blank">Exiftool</a> by Phil Harvey,
        this app lets you inspect the metadata tags embedded in your image files, edit existing tags, 
        or remove the metadata entirely.</p>
        <% if (flash?.info) { %>
        <div id="info" class="info">
            <span><%= flash.info %></span>
        </div>
        <% } %>
        <% if (flash?.message) { %>
        <div id="messages" class="messages">
            <span><%= flash.message %></span>
        </div>
        <% } %>
        <% if (flash?.error) { %>
        <div id="errors" class="errors">
            <span><%= flash.error %></span>
        </div>
        <% } %>
        <% if (isAuthenticated) { %>

        <% } %>
    </section>
    <section id="formSection">
        <form id="uploaderId" name="uploader" action="<%= origin %>upload" method="POST" enctype="multiplart/form-data">
            <fieldset id="hiddenFields_Id" name="hiddenFields" form="uploaderId" class="hiddenFieldset" title="">
                <input id="inspectedFilename_Id" name="inspectedFilename" type="hidden" value="">
                <input id="csrf-token_Id" name="csrf-token" type="hidden" value="<%= csrfToken  %>">
            </fieldset>
            <fieldset id="tagSelect_Id" name="tagSelect" form="uploaderId" class="tagSelect" title="Metadata to display">
                <legend>View Image Metadata Tags</legend>
                <label for="full_Id">Full metadata</label>
                <input id="full_Id" name="tagSet" type="radio" value="Full" tabeindex="0" checked> 
                <label for="common_Id">Common metadata</label>
                <input id="common_Id" name="tagSet" type="radio" value="Common" tabeindex="0">
                <label for="location_Id">Location metadata</label>
                <input id="location_Id" name="tagSet" type="radio" value="Location" tabeindex="0">
            </fieldset>
            <fieldset id="tagEditSelect_Id" name="tagEditSelect" form="uploaderId" class="tagSelect" title="Metadata to edit">
                <legend>Clear Image Metadata Tags</legend>
                <label for="stripAllTags_Id">Clear all tags</label>
                <input id="stripAllTags_Id" name="tagSet" type="radio" value="StripAllTags" tabindex="0">
                <label for="stripLocationTags_Id">Clear location tags</label>
                <input id="stripLocationTags_Id" name="tagSet" type="radio" value="StripLocation" tabindex="0">
            </fieldset>
            <fieldset id="filesId" name="files" form="uploaderId" class="" title="Upload image to inspect" tabeindex="0">
                <legend>Upload an image to inspect its metadata.</legend>
                <div id="dragzone">
                    <h2>Drop a photo here to inspect its metadata.</h2>
                    <br>
                    <input id="image_0Id" name="image_0" type="file" accept=".png,.jpg,.jpeg,.heic,.webp">
                </div>
            </fieldset>
            <span class="or">or</span>
            <fieldset id="urlInspectId" name="urlInspect" form="uploaderId" class="urlFieldset" title="Paset URL to image to inspect">
                <label for="url_Id">URL of an image to inspect: </label>
                <input id="url_Id" name="url" type="text" value="" tabeindex="0">
                <input id="submit_Id" name="submit" type="submit" value="Inspect Image" tabindex="0">
            </fieldset>
        </form>
    </section>
    <section id="metadataSection">
        <div id="infozone">
        </div>
        <div id="metazone">
        </div>
    </section>
    <script nonce="<%= nonce %>">
        const origin = '<%= origin %>'
        const form = document.forms[0]
        const fileElement = form['image_0Id']
        const submitButton = form['submit_Id']
        const dragzone = document.querySelector('div#dragzone')
        const infozone = document.querySelector('div#infozone')
        const metazone = document.querySelector('div#metazone')
        const formData = new FormData()
        dragzone.addEventListener('dragenter', (e) => {
            // e.preventDefault()
            e.stopPropagation();
            // e.target.classList.add('dragTarget')
            (document.querySelector('#filesId')).classList.add('dragTarget')
            console.log('entering the drag zone')
        })
        dragzone.addEventListener('dragleave', (e) => {
            // e.preventDefault()
            e.stopPropagation();
            // e.target.classList.remove('dragTarget')
            (document.querySelector('#filesId')).classList.remove('dragTarget')
            console.log('leaving drag zone.')
        })
        dragzone.addEventListener('dragover', (e) => {
            e.preventDefault()
            // console.log(e)
        })
        dragzone.addEventListener('drop', (e) => {
            e.preventDefault()
            e.stopPropagation();
            (document.querySelector('#filesId')).classList.remove('dragTarget')
            // e.target.classList.remove('dragTarget')
            const fileInput = form['image_0Id']
            fileInput.files = e.dataTransfer.files
            // const files = e.dataTransfer.files
            console.log(fileInput.files[0])
            setFileInfo(fileInput.files[0])
        })
        fileElement.addEventListener('change', (e) => {
            e.preventDefault()
            e.stopPropagation()
            console.log(e)
            // metazone.innerHTML = ''
            setFileInfo(e.target.files[0])
        })
        submitButton.addEventListener('click', (e) => {
            e.preventDefault()
            e.stopPropagation()
            if (form['url'].value === '') {
                form['url'].focus()
                return
            }
            setFileInfo()
        })
        async function setFileInfo(file = null) {
            formData.append('csrfTokenHidden', form['csrf-token'].value)
            formData.append('tagSet', form['tagSet'].value)
            if (file !== null) {
                metazone.innerHTML = ''
                if (infozone.firstElementChild !== null) {
                    infozone.removeChild(infozone.firstElementChild)
                }
                let info = document.createElement('ul')
                info.id = 'fileInfo'
                const name = document.createElement('li')
                name.innerText = file.name
                const size = document.createElement('li')
                size.innerText = `${Math.round(file.size / 1024)} KB`
                const type = document.createElement('li')
                type.innerText = file.type
                info.appendChild(name)
                info.appendChild(type)
                info.appendChild(size)
                let img
                img = document.createElement('li')
                if (/heic$/i.test(file.type)) {
                    // chrome doesn't natively display .HEIC image format
                    img.appendChild(document.createTextNode('HEIC image format is tough to display.'))
                } else {
                    const preview = document.createElement('img')
                    preview.classList.add('smallImgPreview')
                    img.appendChild(preview)
                    const fileReader = new FileReader()
                    fileReader.addEventListener('load', (e) => {
                        preview.src = e.target.result
                    })
                    fileReader.readAsDataURL(file)
                }
                info.appendChild(img)
                infozone.appendChild(info)
                if (form['image_0'].files.length > 0) {
                    formData.append('image_0', file)
                }
            } else {
                if (form['url'].value !== '') {
                    formData.append('url', form['url'].value)
                    let info = document.createElement('ul')
                    info.id = 'fileInfo'
                    const name = document.createElement('li')
                    name.innerText = form['url'].value
                    info.appendChild(name)
                    // const type = document.createElement('li')
                    // type.innerText = file.type
                    // info.appendChild(type)
                    const img = document.createElement('li')
                    const remoteThumbnail = document.createElement('img')
                    remoteThumbnail.classList.add('smallImgPreview')
                    remoteThumbnail.src = form['url'].value
                    img.appendChild(remoteThumbnail)
                    info.appendChild(img)
                    infozone.appendChild(info)
                }
            }
            await send(formData)
            console.log(`tagSet: ${formData.get('tagSet')}`)
            console.log(`image_0: ${formData.get('image_0')}`)
            console.log(`url: ${formData.get('url')}`)
        }
        let imgMetadata
        let tags
        async function send(data) {
            let jwtAccess = '<%= jwtAccess %>'
            const opts = {
                method: 'POST',
                headers: {
                    'Accept': 'application/json',
                    Authorization: `Bearer ${jwtAccess}`,
                },
                body: data
            }
            console.log(opts)
            const url = new URL(`${origin}upload`)
            console.log(url.toString())
            const request = new Request(url, opts)
            console.log(request)
            const response = await fetch(request, { credentials: 'same-origin' })
            if (response.status === 200) {
                const results = await response.json()
                console.log(results)
                if (results.inspectedFile) {
                    form['inspectedFilename'].value = results.inspectedFile
                }
                const list = document.createElement('ul')
                list.id = 'tagList'
                imgMetadata = results.metadata
                tags = Object.keys(results.metadata[0])
                let x = 0
                for(const tag of tags) {
                    if (/file:directory/i.test(tag)) {
                        continue
                    }
                    if (/sourcefile/i.test(tag)) {
                        continue
                    }
                    x += 1
                    const liTag = document.createElement('li')
                    liTag.classList.add('mono')
                    const p = Math.abs(39 - tag.length)
                    liTag.innerHTML = `<span id="tag_${x}">${tag}</span><pre class="${p} mono">${' '.padEnd(p, ' ')}</pre><span id="val_${x}">${imgMetadata[0][tag]}</span>`
                    list.appendChild(liTag)
                }
                metazone.appendChild(list)
            }
        }
    </script>
